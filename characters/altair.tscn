[gd_scene load_steps=11 format=3 uid="uid://cs5doddy0yei3"]

[ext_resource type="Texture2D" uid="uid://b2s2v6jeesw6m" path="res://sprites/altair_idle_sheet.png" id="1_7pl1k"]

[sub_resource type="GDScript" id="GDScript_alnjj"]
script/source = "extends CharacterBody2D

var level = 1
var is_taking_knockback = false
var enemy_in_attack_range = false
var is_left_knockback = false

@export var life = 20
@export var atk = 6
@export var xp = 0
@export var is_dead = false

@onready var knockback_timer := $KnockbackTimer

const SPEED = 125.0
const JUMP_VELOCITY = -300.0
const KNOCKBACK = 1.25

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")

func _physics_process(delta):
	movement(delta)
	
	if life <= 0:
		is_dead = true
		print('dead!')
		#self.queue_free()
	
func movement(delta):
	
	if is_taking_knockback:
		if is_left_knockback:
			global_position.x -= KNOCKBACK
		else:
			global_position.x += KNOCKBACK
			
	# Add the gravity.
	if not is_on_floor():
		velocity.y += gravity * delta

	if !is_taking_knockback:
		# Handle jump.
		if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
			velocity.y = JUMP_VELOCITY

		# Get the input direction and handle the movement/deceleration.
		# As good practice, you should replace UI actions with custom gameplay actions.
		var direction = Input.get_axis(\"ui_left\", \"ui_right\")
		
		if direction:
			velocity.x = direction * SPEED
		else:
			velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()

func take_damage(damage: int, body: CharacterBody2D):
	if enemy_in_attack_range and !is_taking_knockback:
		# used to identify direction of knockback
		is_left_knockback = (position.x - body.position.x) < 0
		knockback_timer.start()
		is_taking_knockback = true
		life -= damage
		print('life: ', life)
		velocity.x = 0

func _on_hitbox_body_entered(body: CharacterBody2D):
	if body.has_method(\"enemy\"):
		enemy_in_attack_range = true

func _on_hitbox_body_exited(body):
	if body.has_method(\"enemy\"):
		enemy_in_attack_range = false


func _on_knockback_timer_timeout():
	is_taking_knockback = false
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_kxog3"]
radius = 5.0
height = 42.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_5fya8"]
radius = 6.0
height = 44.0

[sub_resource type="Animation" id="Animation_c56vs"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_swddo"]
resource_name = "idle"
length = 1.2
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("1_7pl1k")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [12]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_t5pd0"]
_data = {
"RESET": SubResource("Animation_c56vs"),
"idle": SubResource("Animation_swddo")
}

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_efilk"]
animation = &"idle"

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_vut2w"]
advance_mode = 2

[sub_resource type="AnimationNodeStateMachine" id="AnimationNodeStateMachine_488gt"]
states/Start/position = Vector2(230, 100)
states/idle/node = SubResource("AnimationNodeAnimation_efilk")
states/idle/position = Vector2(533, 100)
transitions = ["Start", "idle", SubResource("AnimationNodeStateMachineTransition_vut2w")]
graph_offset = Vector2(-32, -42)

[node name="Altair" type="CharacterBody2D" groups=["player"]]
script = SubResource("GDScript_alnjj")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 3)
shape = SubResource("CapsuleShape2D_kxog3")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_7pl1k")
hframes = 12

[node name="Hitbox" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hitbox"]
position = Vector2(0, 3)
shape = SubResource("CapsuleShape2D_5fya8")

[node name="KnockbackTimer" type="Timer" parent="."]
wait_time = 0.5

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_t5pd0")
}

[node name="AnimationTree" type="AnimationTree" parent="."]
tree_root = SubResource("AnimationNodeStateMachine_488gt")
anim_player = NodePath("../AnimationPlayer")

[connection signal="body_entered" from="Hitbox" to="." method="_on_hitbox_body_entered"]
[connection signal="body_exited" from="Hitbox" to="." method="_on_hitbox_body_exited"]
[connection signal="timeout" from="KnockbackTimer" to="." method="_on_knockback_timer_timeout"]
